name: Release - Multi-Platform Builds

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v2.0.0, v1.1.0)
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller==6.16.0
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.4.1+cpu torchaudio==2.4.1+cpu
          pip install -r requirements-build.txt

      - name: Build Windows EXE (One-File)
        run: python -m PyInstaller --clean --noconfirm usdxfixgap.spec

      - name: Verify Windows One-File Executable
        run: |
          echo "Testing one-file executable..."
          dist\usdxfixgap.exe --version
          dist\usdxfixgap.exe --health-check
          if ($LASTEXITCODE -ne 0) {
            echo "❌ Health check failed!"
            exit 1
          }
          echo "✅ Windows one-file executable verified"

      - name: Build Windows Portable (Directory)
        run: python -m PyInstaller --clean --noconfirm usdxfixgap-portable.spec

      - name: Verify Windows Portable Executable
        run: |
          echo "Testing portable executable..."
          dist\usdxfixgap-portable\usdxfixgap.exe --version
          dist\usdxfixgap-portable\usdxfixgap.exe --health-check
          if ($LASTEXITCODE -ne 0) {
            echo "❌ Portable health check failed!"
            exit 1
          }
          echo "✅ Windows portable executable verified"

      - name: Package Windows Portable
        run: |
          cd dist
          Compress-Archive -Path usdxfixgap-portable -DestinationPath usdxfixgap-portable-windows.zip
          cd ..

      - name: Upload Windows One-File Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: dist/usdxfixgap.exe
          retention-days: 7

      - name: Upload Windows Portable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: dist/usdxfixgap-portable-windows.zip
          retention-days: 7

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libsndfile1 \
            ffmpeg \
            portaudio19-dev \
            libegl1 \
            libgl1 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libxcb-shape0 \
            libglib2.0-0 \
            libdbus-1-3 \
            libfontconfig1 \
            libx11-xcb1 \
            libxcb-cursor0

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --no-cache-dir pyinstaller==6.16.0

      - name: Install Python dependencies (CPU-only PyTorch)
        run: |
          python -m pip install --no-cache-dir \
            --extra-index-url https://download.pytorch.org/whl/cpu \
            -r requirements-build-linux.txt

      - name: Verify no CUDA dependencies installed
        run: |
          BAD=$(python -m pip freeze | grep -E '^(nvidia-|pytorch-triton|triton==)' || true)
          if [ -n "$BAD" ]; then
            echo "❌ ERROR: Unexpected CUDA-related packages found:"
            echo "$BAD"
            exit 1
          fi
          echo "✅ No CUDA dependencies found - build will be CPU-only"

      - name: Build Linux Executable
        run: |
          # Use system Python directly - it already has CPU-only PyTorch installed
          # Don't use ./run.sh build which would create a new venv with wrong packages
          python -m PyInstaller --clean --noconfirm usdxfixgap.spec

      - name: Verify Linux Executable
        run: |
          echo "Testing executable..."
          chmod +x dist/usdxfixgap
          dist/usdxfixgap --version
          dist/usdxfixgap --health-check || exit 1
          echo "✅ Linux executable verified"

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-exe
          path: dist/usdxfixgap
          retention-days: 7

  build-macos:
    name: Build macOS Executable
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          brew install portaudio ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller
          pip install -r requirements-build-macos.txt

      - name: Make build script executable
        run: chmod +x run.sh

      - name: Build macOS Executable
        run: ./run.sh build

      - name: Verify macOS Executable
        run: |
          echo "Testing executable..."
          chmod +x dist/usdxfixgap
          dist/usdxfixgap --version
          dist/usdxfixgap --health-check || exit 1
          echo "✅ macOS executable verified"

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-exe
          path: dist/usdxfixgap
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read VERSION file
        id: get_version
        run: |
          # Read VERSION file (for release notes lookup only)
          VERSION=$(cat VERSION | tr -d '[:space:]' | tr -d '\r\n' | sed 's/^[.]*//g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Release notes from: ${VERSION}"

          # Use tag name for filenames and release title (includes -rc1, -beta, etc.)
          TAG_NAME="${GITHUB_REF_NAME}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "Release tag: ${TAG_NAME}"

          # Detect pre-release from tag name (rc, beta, alpha)
          if [[ "${TAG_NAME}" =~ -(rc|beta|alpha) ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "🔖 Pre-release detected from tag: ${TAG_NAME}"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "📦 Regular release: ${TAG_NAME}"
          fi

      - name: Check if release notes exist
        id: check_notes
        run: |
          NOTES_FILE="docs/releases/${VERSION}.md"
          if [ -f "$NOTES_FILE" ]; then
            echo "NOTES_EXIST=true" >> $GITHUB_ENV
            echo "NOTES_FILE=${NOTES_FILE}" >> $GITHUB_ENV
            echo "✅ Release notes found: ${NOTES_FILE}"
          else
            echo "NOTES_EXIST=false" >> $GITHUB_ENV
            echo "⚠️  No release notes found at ${NOTES_FILE}"
            echo "Creating default release notes..."
          fi

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-exe
          path: ./artifacts/windows

      - name: Download Windows Portable Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-portable
          path: ./artifacts/windows-portable

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-exe
          path: ./artifacts/linux

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-exe
          path: ./artifacts/macos

      - name: Prepare release artifacts
        run: |
          mkdir -p release

          # Use TAG_NAME for filenames (includes -rc1, -beta, etc.)
          # Windows (one-file)
          cp artifacts/windows/usdxfixgap.exe release/usdxfixgap-${TAG_NAME}-windows.exe

          # Windows (portable)
          cp artifacts/windows-portable/usdxfixgap-portable-windows.zip release/usdxfixgap-${TAG_NAME}-windows-portable.zip

          # Linux - create tar.gz
          chmod +x artifacts/linux/usdxfixgap
          tar -czf release/usdxfixgap-${TAG_NAME}-linux.tar.gz -C artifacts/linux usdxfixgap

          # macOS - create tar.gz
          chmod +x artifacts/macos/usdxfixgap
          tar -czf release/usdxfixgap-${TAG_NAME}-macos.tar.gz -C artifacts/macos usdxfixgap

          ls -lh release/

      - name: Generate release notes
        run: |
          if [ "$NOTES_EXIST" = "true" ]; then
            # Use existing release notes (VERSION for lookup, TAG_NAME for display)
            echo "Using release notes from: $NOTES_FILE"
            cat "$NOTES_FILE" > release_notes.md
          else
            # Generate default release notes with TAG_NAME
            echo "Generating default release notes for tag: $TAG_NAME"
            cat > release_notes.md << EOF
          # Release ${TAG_NAME}

          ## Downloads

          ### Windows
          - **One-File**: \`usdxfixgap-${TAG_NAME}-windows.exe\` (~450MB, ~10s first launch)
          - **Portable**: \`usdxfixgap-${TAG_NAME}-windows-portable.zip\` (instant startup)

          ### Linux & macOS
          - **Linux**: \`usdxfixgap-${TAG_NAME}-linux.tar.gz\`
          - **macOS**: \`usdxfixgap-${TAG_NAME}-macos.tar.gz\`

          ## Installation

          ### Windows (One-File)
          Download and run the \`.exe\` file. First launch extracts to temp (~10 seconds).

          ### Windows (Portable)
          1. Extract \`usdxfixgap-${TAG_NAME}-windows-portable.zip\`
          2. Run \`usdxfixgap.exe\` from the extracted folder
          3. Instant startup, no extraction delay

          ### Linux
          \`\`\`bash
          tar -xzf usdxfixgap-${TAG_NAME}-linux.tar.gz
          chmod +x usdxfixgap
          ./usdxfixgap
          \`\`\`

          ### macOS
          \`\`\`bash
          tar -xzf usdxfixgap-${TAG_NAME}-macos.tar.gz
          chmod +x usdxfixgap
          ./usdxfixgap
          \`\`\`

          ## Distribution Formats

          **One-File Executable**: Convenient single file, but extracts on every launch (~10s first time).
          **Portable ZIP**: Extract once, instant startup forever. Recommended for power users.

          ## Notes

          This is an automated release. For detailed changelog, see the commit history.
          EOF
          fi

          echo "📝 Release Notes Preview:"
          head -n 20 release_notes.md

      - name: Create or Update Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if we're in a workflow_dispatch (manual trigger)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - create/update tag
            if git rev-parse "${TAG_NAME}" >/dev/null 2>&1; then
              echo "Tag ${TAG_NAME} already exists, updating..."
              git tag -f -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
              git push -f origin "${TAG_NAME}"
            else
              echo "Creating new tag ${TAG_NAME}..."
              git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
              git push origin "${TAG_NAME}"
            fi
          else
            echo "Triggered by tag push: ${GITHUB_REF_NAME}"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
          files: |
            release/usdxfixgap-${{ env.TAG_NAME }}-windows.exe
            release/usdxfixgap-${{ env.TAG_NAME }}-windows-portable.zip
            release/usdxfixgap-${{ env.TAG_NAME }}-linux.tar.gz
            release/usdxfixgap-${{ env.TAG_NAME }}-macos.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
